extern __printc(string a) -> void;
extern __printstr(string a) -> void;
extern __printd(double a) -> void;
extern sqrtd(double a) -> double;
extern sind(double a) -> double;

# Square root (sqrt)
fn unary?(v) -> double
  sqrtd(v);

fn fact(double v) -> double
  if v < 2 then 1 else v * fact(v-1);

fn binary~(a b) -> double
   if a < b then 
     b 
   else 
     a;

fn unary!(v) -> double
  if v then 0 else 1;

# Unary negate.
fn unary-(v) -> double
  0-v;

# fnine > with the same precedence as <.
fn binary> 10 (LHS RHS) -> double
  RHS < LHS;

# Binary logical or, which does not short circuit.
fn binary| 5 (LHS RHS) -> double
  if LHS then
    1
  else if RHS then
    1
  else
    0;

# Binary logical and, which does not short circuit.
fn binary& 6 (LHS RHS) -> double
  if !LHS then
    0
  else
    !!RHS;

# fnine = with slightly lower precedence than relationals.
fn binary = 9 (LHS RHS) -> double
  !(LHS < RHS | LHS > RHS);

# fnine ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
fn binary : 1 (x y) -> double y;

fn printstar(n) -> string
  var x = 0;
  for i = 1, i < n, 1.0 in
    x = x+1;
  __printd(x);

fn PrintBetterStar(x y) -> double
  for i = 1, i < x, 1.0 in 
    for j = i, j < y, 1.0 in 
      __printd("*");

fn max(a b) -> double if a > b then b else a;

fn success() -> void __printstr("\nyay you got it!\n"); # will just print out the string

fn failed() -> void __printstr("Failed!\n");

fn custom(x) -> double
  var n = ?121;
  ret 100.0;

fn main() -> void
  var x = "sid is the goat";
  __printstr(x);
  var a = -fact(5);

  if a < 0 then success() else failed();

  __printd(a);
  __printd(sind(a));
  # PrintBetterStar(5,5);
